using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Net;
//using System.Web;
//using System.Web.Http;
using System.IO;
using System.Net.Http.Headers;
using System.Diagnostics;
// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace AniDAAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class FaceRecognitionController : ControllerBase
    {

        //[System.Web.Http.HttpPost, DisableRequestSizeLimit]
        [HttpPost("file-upload/")]
        public IActionResult Upload()
        {
            try
            {
                var file = Request.Form.Files[0];
                var folderName = Path.Combine("Resources", "Images");
                var pathToSave = Path.Combine(Directory.GetCurrentDirectory(), folderName);

                if (file.Length > 0)
                {
                    var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                    var fullPath = Path.Combine(pathToSave, fileName);
                    var dbPath = Path.Combine(folderName, fileName);

                    using (var stream = new FileStream(fullPath, FileMode.Create))
                    {
                        file.CopyTo(stream);
                    }

                    ProcessStartInfo start = new ProcessStartInfo();
                    start.FileName = "C:\\inetpub\\wwwroot\\CoreAPI\\Face_Recognition\\dist\\FaceRecognitionPython\\FaceRecognitionPython.exe";
                    start.UseShellExecute = false;
                    start.Arguments = string.Format("{0}", fullPath);
                    start.CreateNoWindow = true;
                    start.RedirectStandardOutput = true;
                    start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
                    start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)

                    string result = "Unsuccessful";
                    using (Process process = Process.Start(start))
                    {
                        using (StreamReader reader = process.StandardOutput)
                        {
                            string stderr = process.StandardError.ReadToEnd();
                            Debug.WriteLine("STDERR: " + stderr);
                            Debug.WriteLine("IN FACE RECOGNITION FOLDER");
                            Console.WriteLine(stderr);
                            result = reader.ReadToEnd();
                            
                            int start_index = result.IndexOf("Result");
                            int last_index = result.LastIndexOf('-');
                            int len = last_index - (start_index+7);
                           
                            result = result.Substring(start_index+7,len);

                            Debug.WriteLine("STDOUT: " + result);
                            Console.WriteLine(result);

                        }
                    }
                    return Ok(new { result});
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex}");
            }
        }
       
       

    }
}
